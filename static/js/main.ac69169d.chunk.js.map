{"version":3,"sources":["service/values.js","service/service.ts","service/interpolation.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["values","lambda","a0","a","b","c","d","lambdaValues","map","value","getTheInterpolatedValueForLambda","searchedValueType","currentLambda","theLowerLambdaValue","forEach","lambdaValue","findTheLowerLambdaValue","theGreaterLambdaValue","find","valueSetForTheLowerLambda","valueSetForTheGreaterLambda","x","x1","y1","x2","y2","interpolation","getValuesForGivenLambda","Error","undefined","hasDataForTheGivenLambda","App","useState","currentValues","setCurrentValues","setLambda","useEffect","parseFloat","error","TextField","style","maxWidth","margin","required","id","label","variant","onChange","e","target","valueType","InputProps","readOnly","uuidv4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac69169d.chunk.js","sourcesContent":["export const values = [\r\n  { lambda: 0.2, a0: 1, a: 1, b: 1, c: 1, d: 1 },\r\n  { lambda: 0.25, a0: 0.9931, a: 0.9889, b: 0.9822, c: 0.9746, d: 0.9611 },\r\n  { lambda: 0.3, a0: 2.0, a: 2.0, b: 2.0, c: 2.0, d: 2.0 },\r\n  { lambda: 0.35, a0: 4.0, a: 1.0, b: 1.0, c: 1.0, d: 1.0 },\r\n  { lambda: 0.4, a0: 5.0, a: 1.0, b: 1.0, c: 1.0, d: 1.0 },\r\n  { lambda: 0.45, a0: 6.0, a: 1.0, b: 1.0, c: 1.0, d: 1.0 },\r\n  { lambda: 0.5, a0: 7.0, a: 1.0, b: 1.0, c: 1.0, d: 1.0 },\r\n  { lambda: 1.75, a0: 0.2985, a: 0.2843, b: 0.2646, c: 0.2457, d: 0.2188 },\r\n  { lambda: 1.8, a0: 0.2833, a: 0.2702, b: 0.2521, c: 0.2345, d: 0.2093 },\r\n];\r\n","import { values } from './values';\r\nimport { interpolation } from './interpolation';\r\n\r\nconst INVALID_LAMBDA_VALUE_MESSAGE = 'A Lambda értéke 0,20 és 3 között kell legyen!';\r\nconst LAMBDA_MIN_VALUE = 0.2;\r\nconst LAMBDA_MAX_VALUE = 3.0;\r\n\r\nconst hasDataForTheGivenLambda = (lambda: number) =>\r\n  values.find((value: any) => value.lambda === lambda) !== undefined;\r\n\r\nconst lambdaValues = values.map((value) => value.lambda);\r\n\r\nconst findTheLowerLambdaValue = (currentLambda: number) => {\r\n  let theLowerLambdaValue;\r\n\r\n  lambdaValues.forEach((lambdaValue) => {\r\n    if (lambdaValue < currentLambda) {\r\n      theLowerLambdaValue = lambdaValue;\r\n    }\r\n  });\r\n\r\n  return theLowerLambdaValue;\r\n};\r\n\r\nconst findTheGreaterLambdaValue = (currentLambda: number) =>\r\n  lambdaValues.find((lambdaValue: number) => lambdaValue > currentLambda);\r\n\r\nconst getTheInterpolatedValueForLambda = (lambda: number, searchedValueType: string) => {\r\n  const theLowerLambdaValue = findTheLowerLambdaValue(lambda);\r\n  const theGreaterLambdaValue = findTheGreaterLambdaValue(lambda);\r\n\r\n  const valueSetForTheLowerLambda: any = values.find(\r\n    (value) => value.lambda === theLowerLambdaValue\r\n  );\r\n  const valueSetForTheGreaterLambda: any = values.find(\r\n    (value) => value.lambda === theGreaterLambdaValue\r\n  );\r\n\r\n  return interpolation({\r\n    x: lambda,\r\n    x1: valueSetForTheLowerLambda?.lambda,\r\n    y1: valueSetForTheLowerLambda[searchedValueType],\r\n    x2: valueSetForTheGreaterLambda?.lambda,\r\n    y2: valueSetForTheGreaterLambda[searchedValueType],\r\n  });\r\n};\r\n\r\nexport const getValuesForGivenLambda = (lambda: number) => {\r\n  if (lambda < LAMBDA_MIN_VALUE || lambda > LAMBDA_MAX_VALUE) {\r\n    throw new Error(INVALID_LAMBDA_VALUE_MESSAGE);\r\n  }\r\n\r\n  if (hasDataForTheGivenLambda(lambda)) {\r\n    return values.find((value: any) => value.lambda === lambda);\r\n  }\r\n\r\n  return {\r\n    lambda,\r\n    a0: getTheInterpolatedValueForLambda(lambda, 'a0'),\r\n    a: getTheInterpolatedValueForLambda(lambda, 'a'),\r\n    b: getTheInterpolatedValueForLambda(lambda, 'b'),\r\n    c: getTheInterpolatedValueForLambda(lambda, 'c'),\r\n    d: getTheInterpolatedValueForLambda(lambda, 'd'),\r\n  };\r\n};\r\n","/**\r\n * @param x - intependent value\r\n * (@param x1, @param y1) - values of the function at one point\r\n * (@param x2, @param y2) - values of the function at another point\r\n *\r\n * @returns y - linear interpolation value\r\n */\r\n\r\nexport const interpolation = ({ x, x1, y1, x2, y2 }: any) =>\r\n  y1 + (x - x1) * ((y2 - y1) / (x2 - x1));\r\n","import { useState, useEffect } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// import { values } from './service/values';\nimport { getValuesForGivenLambda } from './service/service';\n\nfunction App() {\n  // TODO: table component\n  // const [allValues, setAllValues] = useState(values);\n  const [currentValues, setCurrentValues] = useState<any>(getValuesForGivenLambda(1.8));\n  const [lambda, setLambda] = useState('1.8');\n\n  const handleChangeLambda = (e: any) => {\n    setLambda(e.target.value);\n  };\n\n  useEffect(() => {\n    try {\n      setCurrentValues(getValuesForGivenLambda(parseFloat(lambda)));\n    } catch (error) {\n      // do nothing\n    }\n  }, [lambda]);\n\n  return (\n    <>\n      <h1>Acél méretezés</h1>\n\n      <TextField\n        style={{ maxWidth: '10rem', margin: '1rem' }}\n        required\n        id=\"filled-required\"\n        label=\"Required\"\n        value={lambda}\n        variant=\"outlined\"\n        onChange={handleChangeLambda}\n      />\n\n      {['a0', 'a', 'b', 'c', 'd'].map((valueType) => (\n        <TextField\n          key={uuidv4()}\n          style={{ maxWidth: '10rem', margin: '1rem' }}\n          variant=\"outlined\"\n          label={valueType}\n          value={currentValues[valueType]}\n          InputProps={{\n            readOnly: true,\n          }}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}